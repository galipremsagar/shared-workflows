on:
  workflow_call:
    inputs:
      sha:
        type: string
      repo:
        type: string
      node_type:
        type: string
        default: "cpu4"
      build_command:
        type: string
        required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: ["amd64", "arm64"]
        cuda: ["11.8", "12.0"]
        pkgr: ["conda", "pip"]
        exclude:
          - { cuda: '12.0', arch: 'arm64', pkgr: 'conda' }
    runs-on: "linux-${{ matrix.arch }}-${{ inputs.node_type }}"
    permissions:
      id-token: write # This is required for configure-aws-credentials
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Check if repo has devcontainer
        run: |
          if test -f .devcontainer/cuda${{ matrix.cuda }}-${{ matrix.pkgr }}/devcontainer.json; then
            echo "HAS_DEVCONTAINER=true" >> "${GITHUB_ENV}";
          else
            echo "HAS_DEVCONTAINER=false" >> "${GITHUB_ENV}";
          fi
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Copy devcontainer.json file up one level
        run: |
          cp \
            .devcontainer/cuda${{ matrix.cuda }}-${{ matrix.pkgr }}/devcontainer.json \
            .devcontainer/devcontainer.json
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Run build in devcontainer
        uses: devcontainers/ci@v0.3
        with:
          push: never
          runCmd: "${{ inputs.build_command }}"
          env: |
            SCCACHE_REGION=${{ vars.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
