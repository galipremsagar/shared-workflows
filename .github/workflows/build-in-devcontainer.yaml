on:
  workflow_call:
    inputs:
      sha:
        type: string
      repo:
        type: string
      node_type:
        type: string
        default: "cpu8"
      build_command:
        type: string
        required: true
      # Note that this is the _name_ of a secret containing the key, not the key itself.
      extra-repo-deploy-key:
        required: false
        type: string
        default: ''

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: ["amd64"]
        cuda: ["12.0"]
        pkgr: ["conda", "pip"]
    runs-on: "linux-${{ matrix.arch }}-${{ inputs.node_type }}"
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Check if repo has devcontainer
        run: |
          if test -f .devcontainer/cuda${{ matrix.cuda }}-${{ matrix.pkgr }}/devcontainer.json; then
            echo "HAS_DEVCONTAINER=true" >> "${GITHUB_ENV}";
          else
            echo "HAS_DEVCONTAINER=false" >> "${GITHUB_ENV}";
          fi
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Copy devcontainer.json file up one level
        run: |
          echo "REPOSITORY=$(basename $(pwd))" | tee -a "${GITHUB_ENV}";
          cp .devcontainer/cuda${{ matrix.cuda }}-${{ matrix.pkgr }}/devcontainer.json \
             .devcontainer/devcontainer.json;
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Run build in devcontainer
        uses: devcontainers/ci@v0.3
        with:
          push: never
          env: |
            REPOSITORY=${{ env.REPOSITORY }}
            SCCACHE_REGION=${{ vars.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
          runCmd: |
            if test -n "${{ inputs.extra-repo-deploy-key }}"; then

              eval "$(ssh-agent -s)";
              ssh-add - <<< "${{ secrets[inputs.extra-repo-deploy-key] }}";

              re="(ssh:\/\/|https:\/\/)?(git@)?(.*\.com)[:\/](.*)";

              ssh-add -L | while read -r line; do
                pub="$(cut -d' ' -f2 <<< "${line}")";
                url="$(cut -d' ' -f3 <<< "${line}")";

                if ! test -f ~/.ssh/key-${pub}; then
                  cat <<______EOF | tee -a ~/.ssh/key-${pub} >/dev/null
            ${line}
            ______EOF
                fi

                if [[ ${url} =~ ${re} ]]; then
                  host="${BASH_REMATCH[3]}";
                  repo="${BASH_REMATCH[4]//.git/}";

                  cat <<______EOF | tee -a ~/.gitconfig >/dev/null
            [url "git@key-${pub}.${host}:${repo}"]
              insteadOf = https://${host}/${repo}
              insteadOf = git@${host}:${repo}
              insteadOf = ssh://git@${host}/${repo}
            ______EOF

                  cat <<______EOF | tee -a ~/.ssh/config >/dev/null
            Host key-${pub}.${host}
                HostName ${host}
                IdentityFile /home/coder/.ssh/key-${pub}
                IdentitiesOnly yes
            ______EOF

                  unset host;
                  unset repo;
                fi

                unset pub;
                unset url;
              done

              unset line;

              curl -s "https://api.github.com/meta" | \
                jq -r '.ssh_keys | map("github.com \(.)") | .[]' | \
                tee ~/.ssh/known_hosts >/dev/null

              chmod 0700 ~/.ssh;
              chmod 0600 ~/.ssh/*;
            fi

            cd ~/"${REPOSITORY}";
            ${{ inputs.build_command }}
