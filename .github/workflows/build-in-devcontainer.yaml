on:
  workflow_call:
    inputs:
      sha:
        type: string
      repo:
        type: string
      node_type:
        type: string
        default: "cpu4"
      build_command:
        type: string
        required: true

permissions:
  actions: read
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: write
  issues: none
  packages: read
  pages: none
  pull-requests: read
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: ["amd64"]
        cuda: ["12.0"]
        pkgr: ["conda", "pip"]
    runs-on: "linux-${{ matrix.arch }}-${{ inputs.node_type }}"
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.sha }}
          fetch-depth: 0
      - name: Check if repo has devcontainer
        run: |
          if test -f .devcontainer/cuda${{ matrix.cuda }}-${{ matrix.pkgr }}/devcontainer.json; then
            echo "HAS_DEVCONTAINER=true" >> "${GITHUB_ENV}";
            sudo apt update;
            sudo apt install -y --no-install-recommends openssh-client;
          else
            echo "HAS_DEVCONTAINER=false" >> "${GITHUB_ENV}";
          fi
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Set up ssh-agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.CUMLPRIMS_SSH_PRIVATE_DEPLOY_KEY }}
            ${{ secrets.CUGRAPH_OPS_SSH_PRIVATE_DEPLOY_KEY }}
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Copy devcontainer.json file up one level
        run: |
          cp \
            .devcontainer/cuda${{ matrix.cuda }}-${{ matrix.pkgr }}/devcontainer.json \
            .devcontainer/devcontainer.json
          if test -f "$HOME/.gitconfig"; then
            echo "$HOME/.gitconfig:";
            cat "$HOME/.gitconfig";
            cp "$HOME/.gitconfig" .devcontainer/gitconfig;
          fi
          if test -f "$HOME/.ssh/config"; then
            echo "$HOME/.ssh/config:";
            cat "$HOME/.ssh/config";
            cp "$HOME/.ssh/config" .devcontainer/ssh_config;
            sed -i "s@$HOME@/home/coder@g" ".devcontainer/ssh_config";
          fi
          if test -f "$HOME/.ssh/known_hosts"; then
            echo "$HOME/.ssh/known_hosts:";
            cat "$HOME/.ssh/known_hosts";
            cp "$HOME/.ssh/known_hosts" .devcontainer/ssh_known_hosts;
          fi
      - if: ${{ env.HAS_DEVCONTAINER == 'true' }}
        name: Run build in devcontainer
        uses: devcontainers/ci@v0.3
        with:
          push: never
          env: |
            SCCACHE_REGION=${{ vars.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
          runCmd: |
            cp .devcontainer/gitconfig ~/.gitconfig;
            cp .devcontainer/ssh_config ~/.ssh/config;
            cp .devcontainer/ssh_known_hosts ~/.ssh/known_hosts;
            echo "gitconfig:"
            cat ~/.gitconfig;
            echo "ssh/config:"
            cat ~/.ssh/config;
            echo "ssh/known_hosts:"
            cat ~/.ssh/known_hosts;
            ${{ inputs.build_command }}
